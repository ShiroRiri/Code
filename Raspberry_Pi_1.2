# ///////////////////////////////////////
# Raspberry Pi 1:                       #
#  -BNO055 (orientation) [x1]           #
#  -MMA8451 (accelerometer) [x3]        #
#  -TCA9548A (multiplexer) [x1]         #
# ///////////////////////////////////////

# ///////////////////////////////////////////////////////////////
# code to install libraries for each sensor                     #
# on the pi, write in terminal                                  #
#                                                               #
# BNO055                                                        #
# sudo pip3 install adafruit-circuitpython-bno055               #
#                                                               #
# MMA8451                                                       #
# sudo pip3 install adafruit-circuitpython-mma8451              #
#                                                               #
# TCA9548A                                                      #
# sudo pip3 install adafruit-circuitpython-tca9548a             #
# https://github.com/adafruit/Adafruit_CircuitPython_TCA9548A   #
# ///////////////////////////////////////////////////////////////

# libraries
import time #accelerometer
import board #accelerometer #BNO055
import busio # accelerometer  #BNO055
import adafruit_mma8451 #accelerometer
import adafruit_tca9548a   # multiplexer
import threading
import datetime

# initialize I2C bus and sensors for mma8451
i2c = busio.I2C(board.SCL, board.SDA) 


# create the TCA9548A object and give it the I2C bus
tca = adafruit_tca9548a.TCA9548A(i2c)



# create each sensor using the TCA9548A channel instead of the I2C object
tsl1 = adafruit_mma8451.MMA8451(tca[0])   # MMA8451_1
tsl2 = adafruit_mma8451.MMA8451(tca[1])   # MMA8451_2
tsl3 = adafruit_mma8451.MMA8451(tca[2])   # MMA8451_3

# open files for each sensor
mma8451_1 = open('/home/pi/NCR/Read/mma8451_1.txt', 'w')
mma8451_2 = open('/home/pi/NCR/Read/mma8451_2.txt', 'w')
mma8451_3 = open('/home/pi/NCR/Read/mma8451_3.txt', 'w')

# MMA8451 code

def data():

    # MMA8451 code
    x1, y1, z1 = tsl1.acceleration
    x2, y2, z2 = tsl2.acceleration
    x3, y3, z3 = tsl3.acceleration

    
    
    mma8451_1.write("{},{},{}\n".format(x1, y1, z1))
    mma8451_2.write("{},{},{}\n".format(x2, y2, z2))
    mma8451_3.write("{},{},{}\n".format(x3, y3, z3))
    print(datetime.datetime.utcnow()+datetime.timedelta(hours=-8))
    print()
    orientation = tsl2.orientation
    # Orientation is one of these values:
    #  - PL_PUF: Portrait, up, front
    #  - PL_PUB: Portrait, up, back
    #  - PL_PDF: Portrait, down, front
    #  - PL_PDB: Portrait, down, back
    #  - PL_LRF: Landscape, right, front
    #  - PL_LRB: Landscape, right, back
    #  - PL_LLF: Landscape, left, front
    #  - PL_LLB: Landscape, left, back
    print('Orientation: ', end='')
    print(orientation)

#     if orientation == adafruit_mma8451.PL_PUF:
#         print('Portrait, up, front')
#     elif orientation == adafruit_mma8451.PL_PUB:
#         print('Portrait, up, back')
#     elif orientation == adafruit_mma8451.PL_PDF:
#         print('Portrait, down, front')
#     elif orientation == adafruit_mma8451.PL_PDB:
#         print('Portrait, down, back')
#     elif orientation == adafruit_mma8451.PL_LRF:
#         print('Landscape, right, front')
#     elif orientation == adafruit_mma8451.PL_LRB:
#         print('Landscape, right, back')
#     elif orientation == adafruit_mma8451.PL_LLF:
#         print('Landscape, left, front')
#     elif orientation == adafruit_mma8451.PL_LLB:
#         print('Landscape, left, back')

while True:    
    data()


# close files

mma8451_1.close()
mma8451_2.close()
mma8451_3.close()

#remember to take out the reset pin or else this thing wont work...
#when put in PCB's set reset to high on multiplexer
